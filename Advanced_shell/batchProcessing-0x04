#!/bin/bash

# Parallel Pok√©mon Data Retrieval Script
# Fetches multiple Pok√©mon data simultaneously using background processes

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
DATA_DIR="pokemon_data"
LOG_DIR="logs"
MAX_PARALLEL_JOBS=5
TIMEOUT_SECONDS=30

# List of Pok√©mon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Arrays to track processes
declare -a BACKGROUND_PIDS=()
declare -a POKEMON_STATUS=()
declare -A PID_TO_POKEMON=()

# Function to print colored output with timestamp
print_status() {
    local color=$1
    local message=$2
    local timestamp=$(date '+%H:%M:%S')
    echo -e "${color}[${timestamp}] ${message}${NC}"
}

# Function to print progress bar
print_progress() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    
    printf "\r${BLUE}Progress: [${GREEN}"
    for ((i=0; i<filled; i++)); do printf "‚ñà"; done
    printf "${NC}${BLUE}"
    for ((i=filled; i<width; i++)); do printf "‚ñë"; done
    printf "] %d%% (%d/%d)${NC}" "$percentage" "$current" "$total"
}

# Function to create necessary directories
setup_directories() {
    for dir in "$DATA_DIR" "$LOG_DIR"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            print_status "$BLUE" "Created directory: $dir"
        fi
    done
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check for curl
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    # Check for jq
    if ! command -v jq &> /dev/null; then
        missing_deps+=("jq")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_status "$RED" "Error: Missing required dependencies: ${missing_deps[*]}"
        print_status "$YELLOW" "Please install the missing dependencies and try again."
        exit 1
    fi
}

# Function to fetch single Pok√©mon data (runs in background)
fetch_pokemon_background() {
    local pokemon_name=$1
    local process_id=$$
    local output_file="${DATA_DIR}/${pokemon_name}.json"
    local log_file="${LOG_DIR}/${pokemon_name}.log"
    local api_url="${API_BASE_URL}/${pokemon_name,,}"
    local start_time=$(date +%s)
    
    # Log start
    echo "[$(date '+%H:%M:%S')] Starting fetch for $pokemon_name (PID: $process_id)" > "$log_file"
    
    # Fetch data with timeout and retry logic
    local max_retries=3
    local retry_count=0
    local success=false
    
    while [ $retry_count -lt $max_retries ] && [ "$success" = false ]; do
        if timeout "$TIMEOUT_SECONDS" curl -s -f "$api_url" -o "$output_file" 2>>"$log_file"; then
            # Verify the file contains valid JSON
            if [ -s "$output_file" ] && jq empty "$output_file" 2>>"$log_file"; then
                success=true
                local end_time=$(date +%s)
                local duration=$((end_time - start_time))
                echo "[$(date '+%H:%M:%S')] Successfully fetched $pokemon_name in ${duration}s" >> "$log_file"
                exit 0
            else
                echo "[$(date '+%H:%M:%S')] Invalid JSON for $pokemon_name (attempt $((retry_count + 1)))" >> "$log_file"
                rm -f "$output_file"
            fi
        else
            echo "[$(date '+%H:%M:%S')] Failed to fetch $pokemon_name (attempt $((retry_count + 1)))" >> "$log_file"
        fi
        
        ((retry_count++))
        if [ $retry_count -lt $max_retries ]; then
            sleep 1  # Wait before retry
        fi
    done
    
    # If we get here, all retries failed
    echo "[$(date '+%H:%M:%S')] All retries failed for $pokemon_name" >> "$log_file"
    rm -f "$output_file"
    exit 1
}

# Function to start background processes
start_parallel_fetch() {
    local pokemon_count=${#POKEMON_LIST[@]}
    
    print_status "$CYAN" "Starting parallel fetch for $pokemon_count Pok√©mon..."
    print_status "$BLUE" "Maximum parallel jobs: $MAX_PARALLEL_JOBS"
    print_status "$BLUE" "Timeout per request: ${TIMEOUT_SECONDS}s"
    echo ""
    
    for i in "${!POKEMON_LIST[@]}"; do
        local pokemon=${POKEMON_LIST[$i]}
        
        # Wait if we've reached max parallel jobs
        while [ ${#BACKGROUND_PIDS[@]} -ge $MAX_PARALLEL_JOBS ]; do
            wait_for_completion
            sleep 0.1
        done
        
        # Start background process
        print_status "$YELLOW" "Starting fetch for $pokemon..."
        fetch_pokemon_background "$pokemon" &
        local pid=$!
        
        # Track the process
        BACKGROUND_PIDS+=($pid)
        PID_TO_POKEMON[$pid]=$pokemon
        POKEMON_STATUS[$i]="RUNNING"
        
        # Small delay to prevent overwhelming the API
        sleep 0.2
    done
    
    print_status "$CYAN" "All fetch processes started. Waiting for completion..."
}

# Function to wait for process completion and update status
wait_for_completion() {
    local completed_pids=()
    
    for i in "${!BACKGROUND_PIDS[@]}"; do
        local pid=${BACKGROUND_PIDS[$i]}
        
        # Check if process is still running
        if ! kill -0 "$pid" 2>/dev/null; then
            # Process completed, check exit status
            if wait "$pid" 2>/dev/null; then
                local pokemon=${PID_TO_POKEMON[$pid]}
                print_status "$GREEN" "‚úÖ $pokemon completed successfully"
                completed_pids+=($i)
            else
                local pokemon=${PID_TO_POKEMON[$pid]}
                print_status "$RED" "‚ùå $pokemon failed"
                completed_pids+=($i)
            fi
        fi
    done
    
    # Remove completed processes from tracking arrays
    for i in "${completed_pids[@]}"; do
        unset BACKGROUND_PIDS[$i]
        unset PID_TO_POKEMON[${BACKGROUND_PIDS[$i]}]
    done
    
    # Rebuild arrays to remove gaps
    BACKGROUND_PIDS=("${BACKGROUND_PIDS[@]}")
}

# Function to wait for all processes to complete
wait_for_all_processes() {
    local total_pokemon=${#POKEMON_LIST[@]}
    local completed_count=0
    
    print_status "$CYAN" "Monitoring background processes..."
    echo ""
    
    while [ ${#BACKGROUND_PIDS[@]} -gt 0 ]; do
        wait_for_completion
        
        # Update progress
        local current_completed=$((total_pokemon - ${#BACKGROUND_PIDS[@]}))
        if [ $current_completed -ne $completed_count ]; then
            completed_count=$current_completed
            print_progress "$completed_count" "$total_pokemon"
        fi
        
        sleep 0.5
    done
    
    # Final progress update
    print_progress "$total_pokemon" "$total_pokemon"
    echo ""
    echo ""
}

# Function to generate summary report
generate_summary() {
    local success_count=0
    local total_count=${#POKEMON_LIST[@]}
    local total_size=0
    
    print_status "$BLUE" "=== Fetch Summary ==="
    
    for pokemon in "${POKEMON_LIST[@]}"; do
        local json_file="${DATA_DIR}/${pokemon}.json"
        local log_file="${LOG_DIR}/${pokemon}.log"
        
        if [ -f "$json_file" ] && [ -s "$json_file" ]; then
            ((success_count++))
            local file_size=$(stat -f%z "$json_file" 2>/dev/null || stat -c%s "$json_file" 2>/dev/null || echo "0")
            total_size=$((total_size + file_size))
            
            # Extract timing info from log
            local duration="N/A"
            if [ -f "$log_file" ]; then
                duration=$(grep "Successfully fetched" "$log_file" | sed -n 's/.*in \([0-9]*\)s.*/\1s/p' | head -1)
            fi
            
            print_status "$GREEN" "‚úÖ $pokemon: $(echo "scale=1; $file_size/1024" | bc 2>/dev/null || echo "$file_size")KB ${duration:+($duration)}"
        else
            print_status "$RED" "‚ùå $pokemon: Failed"
            
            # Show error details if available
            if [ -f "$log_file" ]; then
                local error=$(tail -1 "$log_file")
                print_status "$RED" "   ‚îî‚îÄ $error"
            fi
        fi
    done
    
    echo ""
    print_status "$CYAN" "Results: $success_count/$total_count successful"
    
    if [ $success_count -gt 0 ]; then
        local avg_size=$((total_size / success_count))
        print_status "$CYAN" "Total data: $(echo "scale=1; $total_size/1024" | bc 2>/dev/null || echo "$total_size")KB"
        print_status "$CYAN" "Average file size: $(echo "scale=1; $avg_size/1024" | bc 2>/dev/null || echo "$avg_size")KB"
    fi
    
    return $success_count
}

# Function to cleanup processes on script exit
cleanup() {
    print_status "$YELLOW" "Cleaning up background processes..."
    
    # Kill any remaining background processes
    for pid in "${BACKGROUND_PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            print_status "$YELLOW" "Terminating process $pid (${PID_TO_POKEMON[$pid]})"
            kill -TERM "$pid" 2>/dev/null
            sleep 1
            kill -KILL "$pid" 2>/dev/null
        fi
    done
    
    # Clear tracking arrays
    BACKGROUND_PIDS=()
    PID_TO_POKEMON=()
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  -j, --jobs N        Set maximum parallel jobs (default: 5)"
    echo "  -t, --timeout N     Set timeout per request in seconds (default: 30)"
    echo "  --dir DIR           Set output directory (default: pokemon_data)"
    echo "  --no-logs           Don't create log files"
    echo ""
    echo "This script fetches Pok√©mon data in parallel for improved performance."
}

# Main function
main() {
    local start_time=$(date +%s)
    
    print_status "$MAGENTA" "üöÄ Parallel Pok√©mon Data Retrieval"
    print_status "$BLUE" "================================================"
    
    # Setup
    setup_directories
    
    # Start parallel fetch
    start_parallel_fetch
    
    # Wait for all processes to complete
    wait_for_all_processes
    
    # Generate summary
    local success_count
    generate_summary
    success_count=$?
    
    # Calculate total execution time
    local end_time=$(date +%s)
    local total_duration=$((end_time - start_time))
    
    echo ""
    print_status "$BLUE" "================================================"
    print_status "$CYAN" "Total execution time: ${total_duration}s"
    
    if [ $success_count -eq ${#POKEMON_LIST[@]} ]; then
        print_status "$GREEN" "üéâ All Pok√©mon data retrieved successfully!"
    else
        print_status "$YELLOW" "‚ö†Ô∏è  Some Pok√©mon data failed to retrieve. Check logs for details."
    fi
    
    print_status "$BLUE" "Data saved to: $DATA_DIR/"
    print_status "$BLUE" "Logs saved to: $LOG_DIR/"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -j|--jobs)
            MAX_PARALLEL_JOBS="$2"
            shift 2
            ;;
        -t|--timeout)
            TIMEOUT_SECONDS="$2"
            shift 2
            ;;
        --dir)
            DATA_DIR="$2"
            shift 2
            ;;
        --no-logs)
            LOG_DIR="/tmp"
            shift
            ;;
        *)
            print_status "$RED" "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Set up signal handlers for cleanup
trap cleanup EXIT INT TERM

# Validate dependencies
check_dependencies

# Run main function
main

exit 0
