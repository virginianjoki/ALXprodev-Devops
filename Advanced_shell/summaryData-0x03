#!/bin/bash

# PokÃ©mon Data Summary Report Script
# Reads JSON files and generates a CSV report with statistics

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DATA_DIR="pokemon_data"
OUTPUT_CSV="pokemon_report.csv"
TEMP_FILE="/tmp/pokemon_temp_$$.csv"

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check for jq
    if ! command -v jq &> /dev/null; then
        missing_deps+=("jq")
    fi
    
    # Check for awk
    if ! command -v awk &> /dev/null; then
        missing_deps+=("awk")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_status "$RED" "Error: Missing required dependencies: ${missing_deps[*]}"
        print_status "$YELLOW" "Please install the missing dependencies and try again."
        print_status "$BLUE" "Ubuntu/Debian: sudo apt-get install jq gawk"
        print_status "$BLUE" "CentOS/RHEL: sudo yum install jq gawk"
        print_status "$BLUE" "macOS: brew install jq gawk"
        exit 1
    fi
}

# Function to check if data directory exists
check_data_directory() {
    if [ ! -d "$DATA_DIR" ]; then
        print_status "$RED" "Error: Data directory '$DATA_DIR' not found!"
        print_status "$YELLOW" "Please run the batch processing script first to generate PokÃ©mon data."
        exit 1
    fi
    
    # Check if there are any JSON files
    local json_count=$(find "$DATA_DIR" -name "*.json" -type f | wc -l)
    if [ "$json_count" -eq 0 ]; then
        print_status "$RED" "Error: No JSON files found in '$DATA_DIR'!"
        print_status "$YELLOW" "Please run the batch processing script first to generate PokÃ©mon data."
        exit 1
    fi
    
    print_status "$BLUE" "Found $json_count JSON files in $DATA_DIR"
}

# Function to extract PokÃ©mon data from JSON file
extract_pokemon_data() {
    local json_file=$1
    local pokemon_name
    local height
    local weight
    
    # Extract data using jq
    pokemon_name=$(jq -r '.name' "$json_file" 2>/dev/null)
    height=$(jq -r '.height' "$json_file" 2>/dev/null)
    weight=$(jq -r '.weight' "$json_file" 2>/dev/null)
    
    # Validate extracted data
    if [ "$pokemon_name" = "null" ] || [ "$height" = "null" ] || [ "$weight" = "null" ]; then
        print_status "$YELLOW" "Warning: Invalid data in $(basename "$json_file")"
        return 1
    fi
    
    # Convert height from decimeters to meters (PokeAPI uses decimeters)
    height_m=$(echo "scale=1; $height / 10" | bc -l 2>/dev/null || awk "BEGIN {printf \"%.1f\", $height/10}")
    
    # Convert weight from hectograms to kilograms (PokeAPI uses hectograms)
    weight_kg=$(echo "scale=1; $weight / 10" | bc -l 2>/dev/null || awk "BEGIN {printf \"%.1f\", $weight/10}")
    
    # Capitalize first letter of name
    pokemon_name=$(echo "$pokemon_name" | sed 's/^./\U&/')
    
    # Output CSV line
    echo "$pokemon_name,$height_m,$weight_kg"
    
    return 0
}

# Function to generate CSV report
generate_csv_report() {
    local processed_count=0
    local total_files=0
    
    print_status "$BLUE" "Generating CSV report..."
    
    # Create CSV header
    echo "Name,Height (m),Weight (kg)" > "$TEMP_FILE"
    
    # Process each JSON file
    for json_file in "$DATA_DIR"/*.json; do
        if [ -f "$json_file" ]; then
            ((total_files++))
            if extract_pokemon_data "$json_file" >> "$TEMP_FILE"; then
                ((processed_count++))
            fi
        fi
    done
    
    if [ "$processed_count" -eq 0 ]; then
        print_status "$RED" "Error: No valid PokÃ©mon data could be extracted!"
        rm -f "$TEMP_FILE"
        exit 1
    fi
    
    # Sort the CSV by name (excluding header)
    {
        head -n 1 "$TEMP_FILE"
        tail -n +2 "$TEMP_FILE" | sort
    } > "$OUTPUT_CSV"
    
    rm -f "$TEMP_FILE"
    
    print_status "$GREEN" "CSV Report generated at: $OUTPUT_CSV"
    print_status "$BLUE" "Processed $processed_count out of $total_files files"
    
    return "$processed_count"
}

# Function to display CSV content
display_csv_content() {
    echo ""
    cat "$OUTPUT_CSV"
    echo ""
}

# Function to calculate statistics using awk
calculate_statistics() {
    local avg_height
    local avg_weight
    
    print_status "$BLUE" "Calculating statistics..."
    
    # Use awk to calculate averages (skip header line)
    local stats=$(awk -F',' '
        NR > 1 { 
            height_sum += $2; 
            weight_sum += $3; 
            count++ 
        } 
        END { 
            if (count > 0) {
                avg_height = height_sum / count;
                avg_weight = weight_sum / count;
                printf "%.2f %.2f", avg_height, avg_weight;
            } else {
                printf "0.00 0.00";
            }
        }' "$OUTPUT_CSV")
    
    # Extract values
    avg_height=$(echo "$stats" | cut -d' ' -f1)
    avg_weight=$(echo "$stats" | cut -d' ' -f2)
    
    # Display statistics
    echo "Average Height: $avg_height m"
    echo "Average Weight: $avg_weight kg"
}

# Function to show detailed statistics
show_detailed_stats() {
    print_status "$BLUE" "=== Detailed Statistics ==="
    
    # Calculate min, max, and other stats using awk
    awk -F',' '
    NR > 1 { 
        heights[NR-1] = $2; 
        weights[NR-1] = $3;
        height_sum += $2; 
        weight_sum += $3; 
        count++;
        
        if (NR == 2) {
            min_height = max_height = $2;
            min_weight = max_weight = $3;
        } else {
            if ($2 < min_height) min_height = $2;
            if ($2 > max_height) max_height = $2;
            if ($3 < min_weight) min_weight = $3;
            if ($3 > max_weight) max_weight = $3;
        }
    } 
    END { 
        if (count > 0) {
            printf "Total PokÃ©mon: %d\n", count;
            printf "Height - Min: %.1f m, Max: %.1f m, Avg: %.2f m\n", min_height, max_height, height_sum/count;
            printf "Weight - Min: %.1f kg, Max: %.1f kg, Avg: %.2f kg\n", min_weight, max_weight, weight_sum/count;
        }
    }' "$OUTPUT_CSV"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help       Show this help message"
    echo "  -d, --detailed   Show detailed statistics"
    echo "  -o, --output     Specify output CSV file (default: pokemon_report.csv)"
    echo "  --dir            Specify input directory (default: pokemon_data)"
    echo ""
    echo "This script reads JSON files from the data directory and generates a CSV report"
    echo "with PokÃ©mon names, heights, and weights, along with calculated averages."
}

# Function to cleanup temporary files
cleanup() {
    rm -f "$TEMP_FILE"
}

# Main function
main() {
    local show_detailed=false
    
    print_status "$BLUE" "=== PokÃ©mon Data Summary Report ==="
    
    # Check if data directory exists and has files
    check_data_directory
    
    # Generate CSV report
    generate_csv_report
    local pokemon_count=$?
    
    # Display CSV content
    display_csv_content
    
    # Calculate and display statistics
    calculate_statistics
    
    # Show detailed stats if requested
    if [ "$show_detailed" = true ]; then
        echo ""
        show_detailed_stats
    fi
    
    print_status "$GREEN" "Report generation completed successfully! ðŸ“Š"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -d|--detailed)
            show_detailed=true
            shift
            ;;
        -o|--output)
            OUTPUT_CSV="$2"
            shift 2
            ;;
        --dir)
            DATA_DIR="$2"
            shift 2
            ;;
        *)
            print_status "$RED" "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Set up signal handlers
trap cleanup EXIT INT TERM

# Check dependencies
check_dependencies

# Run main function
main

exit 0
